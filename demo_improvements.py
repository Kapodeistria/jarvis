#!/usr/bin/env python3
"""
Demonstration der Prompt-Optimierung f√ºr Issue #3
================================================

Zeigt die Verbesserungen der neuen strukturierten Prompt-Templates
gegen√ºber dem alten System.
"""

def demonstrate_improvements():
    """Demonstriert die Verbesserungen durch die neuen Prompt-Templates"""
    
    print("JARVIS PROMPT-OPTIMIERUNG - VORHER vs. NACHHER")
    print("=" * 60)
    
    # Beispiel-Situationen
    scenarios = [
        {
            "name": "Screenshot-Analyse",
            "ocr_text": "VS Code ge√∂ffnet. Python-Datei mit Syntax-Fehler in Zeile 42."
        },
        {
            "name": "WhatsApp-Chat",
            "chat_text": "Lisa: Kommst du heute Abend zur Party?\nDu: Bin noch unsicher...\nLisa: W√§re sch√∂n wenn du da w√§rst!"
        }
    ]
    
    for scenario in scenarios:
        print(f"\n{scenario['name'].upper()}")
        print("-" * 40)
        
        if "ocr_text" in scenario:
            demonstrate_screenshot_improvement(scenario["ocr_text"])
        else:
            demonstrate_whatsapp_improvement(scenario["chat_text"])

def demonstrate_screenshot_improvement(ocr_text):
    """Zeigt Verbesserung bei Screenshot-Prompts"""
    
    # ALTE VERSION (wie es vorher war)
    old_prompt = f"""Be a sassy Jarvis. Suggest short, clever next steps or reminders.

OCR TEXT:
{ocr_text}

ANTWORT:"""
    
    # NEUE VERSION
    from prompt_templates import get_prompt_template, JarvisStyle
    template = get_prompt_template('screenshot', JarvisStyle.SASSY)
    new_prompt = template.build_prompt(ocr_text)
    
    print("VORHER (alte Struktur):")
    print(old_prompt)
    print("\nNACHHER (neue strukturierte Prompts):")
    print(new_prompt)
    
    print("\nüìà VERBESSERUNGEN:")
    print("  ‚úÖ Klarere INSTRUCTION/CONTENT Trennung")
    print("  ‚úÖ Spezifischere Aufgabenbeschreibung")
    print("  ‚úÖ Konsistente Struktur")
    print("  ‚úÖ Weniger Halluzination durch pr√§zise Anweisungen")

def demonstrate_whatsapp_improvement(chat_text):
    """Zeigt Verbesserung bei WhatsApp-Prompts"""
    
    # ALTE VERSION
    old_prompt = f"""Du bist mein pers√∂nlicher WhatsApp-Assistent, der mir hilft, im aktuellen Chat sinnvolle Antworten vorzuschlagen. Der folgende Text ist der sichtbare Chatverlauf:

{chat_text}

Bitte gib mir 3 kurze, freundliche Antwortvorschl√§ge, die ich schnell √ºbernehmen kann. Ber√ºcksichtige den Ton und die vorherigen Nachrichten. Keine weiteren Erkl√§rungen, nur die Vorschl√§ge."""
    
    # NEUE VERSION
    from prompt_templates import get_prompt_template, JarvisStyle
    template = get_prompt_template('whatsapp', JarvisStyle.FRIENDLY)
    new_prompt = template.build_prompt(chat_text)
    
    print("VORHER (alte Struktur):")
    print(old_prompt)
    print("\nNACHHER (neue strukturierte Prompts):")
    print(new_prompt)
    
    print("\nüìà VERBESSERUNGEN:")
    print("  ‚úÖ Stil-spezifische Anweisungen")
    print("  ‚úÖ Strukturierte Aufgabendefinition")
    print("  ‚úÖ Klarere Trennung von Anweisung und Chat-Content")
    print("  ‚úÖ Personalit√§ts-basierte Antworten")

def show_personality_variety():
    """Zeigt die Vielfalt der neuen Jarvis-Pers√∂nlichkeiten"""
    
    print("\n" + "=" * 60)
    print("NEUE JARVIS-PERS√ñNLICHKEITEN")
    print("=" * 60)
    
    from prompt_templates import get_prompt_template, JarvisStyle
    
    sample_text = "Kalender zeigt 5 Termine heute. N√§chster in 20 Minuten."
    
    personalities = [
        (JarvisStyle.CLASSIC, "Professionell & h√∂flich"),
        (JarvisStyle.SASSY, "Witzig & schlagfertig"), 
        (JarvisStyle.MINIMALIST, "Kurz & pr√§zise"),
        (JarvisStyle.FRIENDLY, "Warmherzig & unterst√ºtzend"),
        (JarvisStyle.TECHNICAL, "Analytisch & detailliert")
    ]
    
    for style, description in personalities:
        print(f"\n{style.value.upper()} ({description}):")
        print("-" * 30)
        
        template = get_prompt_template('screenshot', style)
        prompt = template.build_prompt(sample_text)
        
        # Zeige nur die INSTRUCTION Sektion
        instruction_part = prompt.split("AUFGABE:")[0] + "AUFGABE:"
        print(instruction_part)

def show_key_improvements():
    """Zeigt die wichtigsten Verbesserungen zusammengefasst"""
    
    print("\n" + "=" * 60)
    print("ZUSAMMENFASSUNG DER OPTIMIERUNGEN")
    print("=" * 60)
    
    improvements = [
        "üéØ KLARERE STRUKTUR",
        "   ‚Ä¢ Strikte Trennung zwischen INSTRUCTION und CONTENT",
        "   ‚Ä¢ Konsistente Template-Struktur f√ºr alle Anwendungsf√§lle",
        "   ‚Ä¢ Kein Vermischen von Anweisungen und Daten",
        "",
        "üé≠ MEHRERE PERS√ñNLICHKEITEN",
        "   ‚Ä¢ 5 verschiedene Jarvis-Stile f√ºr unterschiedliche Situationen",
        "   ‚Ä¢ Konfigurierbar √ºber config.json",
        "   ‚Ä¢ Einfach erweiterbar f√ºr neue Stile",
        "",
        "üîß WENIGER HALLUZINATION",
        "   ‚Ä¢ Pr√§zisere Anweisungen reduzieren unerw√ºnschte Ausgaben",
        "   ‚Ä¢ Spezifische Aufgabendefinitionen",
        "   ‚Ä¢ Kontext-bewusste Prompts",
        "",
        "‚öôÔ∏è EINFACHE KONFIGURATION",
        "   ‚Ä¢ JSON-basierte Stil-Auswahl",
        "   ‚Ä¢ Style Configurator Tool",
        "   ‚Ä¢ Vergleichsm√∂glichkeiten zwischen Stilen",
        "",
        "üîÑ ERWEITERBARKEIT",
        "   ‚Ä¢ Template-System f√ºr neue Prompt-Typen",
        "   ‚Ä¢ Einfaches Hinzuf√ºgen neuer Pers√∂nlichkeiten",
        "   ‚Ä¢ Modular aufgebaut"
    ]
    
    for improvement in improvements:
        print(improvement)

if __name__ == "__main__":
    demonstrate_improvements()
    show_personality_variety()
    show_key_improvements()
    
    print(f"\n{'='*60}")
    print("‚úÖ PROMPT-OPTIMIERUNG ERFOLGREICH IMPLEMENTIERT")
    print(f"{'='*60}")
    print("\nN√§chste Schritte:")
    print("‚Ä¢ Starten Sie die Anwendung und testen Sie verschiedene Stile")
    print("‚Ä¢ Nutzen Sie python style_configurator.py zum Stil-Wechsel") 
    print("‚Ä¢ Beobachten Sie klarere, pr√§zisere Antworten mit weniger Halluzination")